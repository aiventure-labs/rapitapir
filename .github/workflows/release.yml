name: 🏷️ Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  prepare-release:
    name: 🚀 Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 💎 Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: 🧪 Run full test suite
      run: bundle exec rspec
      
    - name: 📝 Calculate new version
      id: version
      run: |
        current_version=$(ruby -r './lib/rapitapir/version' -e 'puts RapiTapir::VERSION')
        echo "Current version: $current_version"
        
        # Simple version bumping logic
        IFS='.' read -ra VERSION_PARTS <<< "$current_version"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}
        
        case "${{ github.event.inputs.version_type }}" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac
        
        new_version="$major.$minor.$patch"
        tag_name="v$new_version"
        
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
        echo "New version will be: $new_version"
        
    - name: 📝 Update version file
      run: |
        sed -i "s/VERSION = '[^']*'/VERSION = '${{ steps.version.outputs.new_version }}'/" lib/rapitapir/version.rb
        
    - name: 📝 Generate changelog
      run: |
        # Create or update CHANGELOG.md
        if [ ! -f CHANGELOG.md ]; then
          cat > CHANGELOG.md << 'EOF'
        # Changelog
        
        All notable changes to this project will be documented in this file.
        
        The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
        and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
        
        EOF
        fi
        
        # Add new version section
        date=$(date +%Y-%m-%d)
        temp_file=$(mktemp)
        
        # Insert new version after the header
        awk -v version="${{ steps.version.outputs.new_version }}" -v date="$date" '
        /^# Changelog/ {print; print ""; print "## [" version "] - " date; print ""; print "### Added"; print "- New features and improvements"; print ""; print "### Changed"; print "- Updated dependencies and optimizations"; print ""; print "### Fixed"; print "- Bug fixes and stability improvements"; print ""; next}
        {print}' CHANGELOG.md > "$temp_file"
        
        mv "$temp_file" CHANGELOG.md
        
    - name: 💾 Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add lib/rapitapir/version.rb CHANGELOG.md
        git commit -m "🔖 Bump version to ${{ steps.version.outputs.new_version }}"
        git push
        
    - name: 🏷️ Create and push tag
      run: |
        git tag ${{ steps.version.outputs.tag_name }}
        git push origin ${{ steps.version.outputs.tag_name }}

  build-and-test:
    name: 🏗️ Build & Test Release
    needs: prepare-release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ruby-version: ['3.0', '3.1', '3.2', '3.3']
        
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag_name }}
        
    - name: 💎 Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
        
    - name: 🧪 Run tests
      run: bundle exec rspec
      
    - name: 📦 Build gem
      run: gem build rapitapir.gemspec
      
    - name: ✅ Test gem installation
      run: |
        gem install ./rapitapir-*.gem
        ruby -e "require 'rapitapir'; puts 'RapiTapir v' + RapiTapir::VERSION + ' loads successfully!'"

  create-release-notes:
    name: 📝 Create Release Notes
    needs: [prepare-release, build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag_name }}
        
    - name: 📝 Extract changelog for this version
      id: changelog
      run: |
        version="${{ needs.prepare-release.outputs.new_version }}"
        
        # Extract changelog section for this version
        awk -v version="$version" '
        /^## \[.*\]/ { 
          if ($0 ~ "\\[" version "\\]") { 
            found=1; next 
          } else if (found) { 
            exit 
          } 
        }
        found && !/^## \[.*\]/ { print }
        ' CHANGELOG.md > release-notes.md
        
        # Set output for GitHub release
        echo 'RELEASE_NOTES<<EOF' >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag_name }}
        name: "🦙 RapiTapir ${{ needs.prepare-release.outputs.new_version }}"
        body: |
          ## 🦙 RapiTapir ${{ needs.prepare-release.outputs.new_version }}
          
          ${{ steps.changelog.outputs.RELEASE_NOTES }}
          
          ### 📦 Installation
          
          ```bash
          gem install rapitapir -v ${{ needs.prepare-release.outputs.new_version }}
          ```
          
          ### 🔗 Useful Links
          
          - [📖 Documentation](https://riccardomerolla.github.io/ruby-tapir)
          - [🚀 Getting Started](https://github.com/riccardomerolla/rapitapir#-quick-start)
          - [📋 Examples](https://github.com/riccardomerolla/rapitapir/tree/main/examples)
          - [🤝 Contributing](https://github.com/riccardomerolla/rapitapir/blob/main/CONTRIBUTING.md)
          
          ### ✨ What's Next?
          
          Check out our [roadmap](https://github.com/riccardomerolla/rapitapir/issues) and consider contributing!
        draft: false
        prerelease: ${{ github.event.inputs.pre_release == 'true' }}
        files: |
          rapitapir-*.gem
