name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  #schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    #- cron: '0 2 * * *'

jobs:
  test:
    name: 🧪 Test Ruby ${{ matrix.ruby-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        ruby-version: ['3.1', '3.2', '3.3']
        
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 💎 Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
        
    - name: 🔍 Run security audit
      run: |
        gem install bundler-audit
        bundler-audit --update
        
    - name: 🧪 Run tests
      run: bundle exec rspec spec
      env:
        CI: true
        COVERAGE: false
      
    - name: 📊 Generate coverage report
      run: bundle exec rspec spec
      if: matrix.ruby-version == '3.2' && matrix.os == 'ubuntu-latest'
      env:
        COVERAGE: true
      
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.ruby-version == '3.2' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 💎 Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: 🔍 Run RuboCop
      continue-on-error: true
      run: |
        gem install rubocop rubocop-rspec rubocop-performance
        rubocop --format github
        
    - name: 📝 Run YARD documentation check
      continue-on-error: true
      run: |
        gem install yard
        yard stats --list-undoc
        
    - name: 🔬 Run Reek code smell detection
      continue-on-error: true
      run: |
        gem install reek
        reek lib/

  examples:
    name: 🚀 Test Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 💎 Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: ✅ Validate example syntax
      run: |
        find examples -name "*.rb" -exec ruby -c {} \;
        
    - name: 🧪 Test getting started example
      run: |
        echo "Testing getting started example..."
        timeout 10 bash -c '
          ruby examples/getting_started_extension.rb &
          SERVER_PID=$!
          sleep 5
          
          # Test if server is running
          if curl -f -s http://localhost:4567/health > /dev/null; then
            echo "✅ Health endpoint working"
          else
            echo "❌ Health endpoint failed"
          fi
          
          if curl -f -s http://localhost:4567/api/docs > /dev/null; then
            echo "✅ Docs endpoint working"
          else
            echo "❌ Docs endpoint failed"
          fi
          
          kill $SERVER_PID 2>/dev/null || true
        ' || echo "⚠️ Example test completed with warnings"
        
    - name: 🧪 Test enterprise example  
      run: |
        echo "Testing enterprise example..."
        timeout 10 bash -c '
          ruby examples/enterprise_rapitapir_api.rb &
          SERVER_PID=$!
          sleep 5
          
          if curl -f -s http://localhost:4568/health > /dev/null; then
            echo "✅ Enterprise health endpoint working"
          else
            echo "❌ Enterprise health endpoint failed"
          fi
          
          kill $SERVER_PID 2>/dev/null || true
        ' || echo "⚠️ Enterprise example test completed with warnings"

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 💎 Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: 🔒 Run Brakeman security scan (forced for gem)
      continue-on-error: true
      run: |
        gem install brakeman
        mkdir -p tmp
        brakeman --force --no-pager --format json --output tmp/brakeman-results.json || echo "⚠️ Brakeman completed with warnings (expected for non-Rails projects)"
        
    - name: 🔍 Run bundler-audit
      run: |
        gem install bundler-audit
        bundler-audit --update
        bundler-audit
