# frozen_string_literal: true

class DocumentationController < ApplicationController
  skip_before_action :verify_authenticity_token, if: -> { request.format.json? }
  
  def swagger_ui
    render html: swagger_ui_html.html_safe
  end
  
  def openapi_spec
    render json: generate_openapi_spec
  end
  
  def redoc
    render html: redoc_html.html_safe
  end
  
  private
  
  def swagger_ui_html
    <<~HTML
      <!DOCTYPE html>
      <html>
      <head>
        <title>#{Rails.application.class.name.split('::').first} API Documentation</title>
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui.css" />
        <style>
          html { box-sizing: border-box; overflow: -moz-scrollbars-vertical; overflow-y: scroll; }
          *, *:before, *:after { box-sizing: inherit; }
          body { margin:0; background: #fafafa; }
        </style>
      </head>
      <body>
        <div id="swagger-ui"></div>
        <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-bundle.js"></script>
        <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-standalone-preset.js"></script>
        <script>
          window.onload = function() {
            const ui = SwaggerUIBundle({
              url: '/openapi.json',
              dom_id: '#swagger-ui',
              deepLinking: true,
              presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIStandalonePreset
              ],
              plugins: [
                SwaggerUIBundle.plugins.DownloadUrl
              ],
              layout: "StandaloneLayout"
            });
          };
        </script>
      </body>
      </html>
    HTML
  end
  
  def redoc_html
    <<~HTML
      <!DOCTYPE html>
      <html>
      <head>
        <title>#{Rails.application.class.name.split('::').first} API Documentation</title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">
        <style>
          body { margin: 0; padding: 0; }
        </style>
      </head>
      <body>
        <redoc spec-url='/openapi.json'></redoc>
        <script src="https://cdn.jsdelivr.net/npm/redoc@2.0.0/bundles/redoc.standalone.js"></script>
      </body>
      </html>
    HTML
  end
  
  def generate_openapi_spec
    {
      openapi: "3.0.3",
      info: {
        title: "#{Rails.application.class.name.split('::').first} API",
        version: "1.0.0",
        description: "API documentation generated by RapiTapir",
        contact: {
          name: "API Support",
          email: "support@example.com"
        }
      },
      servers: [
        {
          url: "#{request.protocol}#{request.host_with_port}",
          description: "#{Rails.env.capitalize} server"
        }
      ],
      paths: generate_paths,
      components: {
        securitySchemes: {
          bearerAuth: {
            type: "http",
            scheme: "bearer",
            bearerFormat: "JWT"
          }
        }
      }
    }
  end
  
  def generate_paths
    paths = {}
    
    # Get all RapiTapir controllers
    rapitapir_controllers = [
      Api::V1::UsersController,
      Api::V1::PostsController
    ]
    
    rapitapir_controllers.each do |controller|
      next unless controller.respond_to?(:endpoints)
      
      controller.endpoints.each do |endpoint|
        path_key = endpoint.path.gsub(/:(\w+)/, '{\1}')
        method = endpoint.method.downcase
        
        paths[path_key] ||= {}
        paths[path_key][method] = {
          summary: endpoint.summary || "#{method.upcase} #{path_key}",
          description: endpoint.description || "",
          tags: endpoint.tags || [controller.name.demodulize.gsub('Controller', '')],
          operationId: "#{method}_#{path_key.gsub(/[\/{}]/, '_').gsub(/_+/, '_').gsub(/^_|_$/, '')}",
          responses: {
            "200" => {
              description: "Success"
            }
          }
        }
        
        # Add authentication if required
        if endpoint.inputs.any? { |input| input.name == :authorization }
          paths[path_key][method][:security] = [{ bearerAuth: [] }]
        end
      end
    end
    
    paths
  end
end
