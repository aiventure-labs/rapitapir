// Generated by RapiTapir TypeScript Client Generator
// Package: api-client
// Version: 1.0.0
// Base URL: http://localhost:4567

// Response type for all API calls
export interface ApiResponse<T> {
  data: T;
  status: number;
  headers: Record<string, string>;
}

// Error type for API errors
export interface ApiError {
  message: string;
  status: number;
  details?: any;
}

// HTTP client configuration
export interface ClientConfig {
  baseUrl?: string;
  headers?: Record<string, string>;
  timeout?: number;
}


// Generated types
export type GetusersResponse = { id: number; name: string; email: string }[];

export interface GetusersbyidRequest {
  id: number;
}


export type GetusersbyidResponse = { id: number; name: string; email: string };

export interface CreateuserRequest {
  body: { name: string; email: string };
}


export type CreateuserResponse = { id: number; name: string; email: string };

export interface UpdateuserRequest {
  id: number;
  body: { name: string; email: string };
}


export type UpdateuserResponse = { id: number; name: string; email: string };

export interface DeleteuserRequest {
  id: number;
}


export type DeleteuserResponse = { success: boolean };

export interface GetuserssearchRequest {
  q: string;
  limit?: number;
}


export type GetuserssearchResponse = { id: number; name: string; email: string }[];

export class CliUserApiClient {
  private baseUrl: string;
  private headers: Record<string, string>;
  private timeout: number;
  
  constructor(config: ClientConfig = {}) {
    this.baseUrl = config.baseUrl || 'http://localhost:4567';
    this.headers = config.headers || {};
    this.timeout = config.timeout || 10000;
  }
  
  private async request<T>(
    method: string,
    path: string,
    options: {
      params?: Record<string, any>;
      body?: any;
      headers?: Record<string, string>;
    } = {}
  ): Promise<ApiResponse<T>> {
    const url = new URL(path, this.baseUrl);
    
    // Add query parameters
    if (options.params) {
      Object.entries(options.params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }
    
    const requestHeaders = {
      'Content-Type': 'application/json',
      ...this.headers,
      ...options.headers,
    };
    
    const requestInit: RequestInit = {
      method,
      headers: requestHeaders,
    };
    
    if (options.body) {
      requestInit.body = JSON.stringify(options.body);
    }
    
    try {
      const response = await fetch(url.toString(), requestInit);
      
      const responseHeaders: Record<string, string> = {};
      response.headers.forEach((value, key) => {
        responseHeaders[key] = value;
      });
      
      let data: T;
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        data = await response.json();
      } else {
        data = (await response.text()) as unknown as T;
      }
      
      if (!response.ok) {
        const error: ApiError = {
          message: `HTTP ${response.status}: ${response.statusText}`,
          status: response.status,
          details: data,
        };
        throw error;
      }
      
      return {
        data,
        status: response.status,
        headers: responseHeaders,
      };
    } catch (error) {
      if (error && typeof error === 'object' && 'status' in error) {
        throw error; // Re-throw ApiError
      }
      
      const apiError: ApiError = {
        message: error instanceof Error ? error.message : 'Unknown error',
        status: 0,
        details: error,
      };
      throw apiError;
    }
  }
  
  async getUsers(): Promise<ApiResponse<GetusersResponse>> {
    return this.request<GetusersResponse>('GET', '/users');
  }

  async getUsersById(request: GetusersbyidRequest): Promise<ApiResponse<GetusersbyidResponse>> {
    return this.request<GetusersbyidResponse>('GET', `/users/${request.id}`, {
    });
  }

  async createUser(request: CreateuserRequest): Promise<ApiResponse<CreateuserResponse>> {
    return this.request<CreateuserResponse>('POST', '/users', {
      body: request.body
    });
  }

  async updateUser(request: UpdateuserRequest): Promise<ApiResponse<UpdateuserResponse>> {
    return this.request<UpdateuserResponse>('PUT', `/users/${request.id}`, {
      body: request.body
    });
  }

  async deleteUser(request: DeleteuserRequest): Promise<ApiResponse<DeleteuserResponse>> {
    return this.request<DeleteuserResponse>('DELETE', `/users/${request.id}`, {
    });
  }

  async getUsersSearch(request: GetuserssearchRequest): Promise<ApiResponse<GetuserssearchResponse>> {
    return this.request<GetuserssearchResponse>('GET', '/users/search', {
      params: { q: request.q, limit: request.limit }
    });
  }
}


// Default export
export default CliUserApiClient;
