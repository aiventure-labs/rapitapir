# frozen_string_literal: true

require 'spec_helper'
require 'tempfile'

RSpec.describe RapiTapir::Client::TypescriptGenerator do
  include RapiTapir::DSL

  let(:endpoints) do
    [
      # Simple GET endpoint
      RapiTapir.get('/users')
        .out(json_body([{ id: :integer, name: :string }]))
        .summary('Get all users'),

      # GET with path parameter
      RapiTapir.get('/users/:id')
        .in(path_param(:id, :integer))
        .out(json_body({ id: :integer, name: :string, email: :string }))
        .summary('Get user by ID'),

      # POST with body
      RapiTapir.post('/users')
        .in(body({ name: :string, email: :string }))
        .out(json_body({ id: :integer, name: :string, email: :string }))
        .summary('Create user'),

      # GET with query parameters
      RapiTapir.get('/users/search')
        .in(query(:q, :string))
        .in(query(:limit, :integer, optional: true))
        .out(json_body([{ id: :integer, name: :string }]))
        .summary('Search users')
    ]
  end

  let(:config) do
    {
      base_url: 'https://api.example.com',
      client_name: 'TestApiClient',
      package_name: 'test-api-client',
      version: '1.0.0'
    }
  end

  let(:generator) { described_class.new(endpoints: endpoints, config: config) }

  describe '#initialize' do
    it 'sets endpoints and config' do
      expect(generator.endpoints).to eq(endpoints)
      expect(generator.config[:base_url]).to eq('https://api.example.com')
      expect(generator.config[:client_name]).to eq('TestApiClient')
    end

    it 'merges with default config' do
      simple_generator = described_class.new(endpoints: [])
      expect(simple_generator.config[:base_url]).to eq('http://localhost:4567')
      expect(simple_generator.config[:client_name]).to eq('ApiClient')
    end
  end

  describe '#generate' do
    let(:generated_code) { generator.generate }

    it 'generates valid TypeScript code' do
      expect(generated_code).to be_a(String)
      expect(generated_code).not_to be_empty
    end

    it 'includes header comments' do
      expect(generated_code).to include('// Generated by RapiTapir TypeScript Client Generator')
      expect(generated_code).to include('// Package: test-api-client')
      expect(generated_code).to include('// Version: 1.0.0')
      expect(generated_code).to include('// Base URL: https://api.example.com')
    end

    it 'includes base interfaces' do
      expect(generated_code).to include('export interface ApiResponse<T>')
      expect(generated_code).to include('export interface ApiError')
      expect(generated_code).to include('export interface ClientConfig')
    end

    it 'generates request/response types' do
      expect(generated_code).to include('export type GetusersResponse')
      expect(generated_code).to include('export interface GetusersbyidRequest')
      expect(generated_code).to include('export type GetusersbyidResponse')
      expect(generated_code).to include('export interface CreateuserRequest')
      expect(generated_code).to include('export type CreateuserResponse')
    end

    it 'generates client class' do
      expect(generated_code).to include('export class TestApiClient')
      expect(generated_code).to include('private baseUrl: string')
      expect(generated_code).to include('private headers: Record<string, string>')
      expect(generated_code).to include('constructor(config: ClientConfig = {})')
    end

    it 'generates client methods' do
      expect(generated_code).to include('async getUsers()')
      expect(generated_code).to include('async getUsersById(')
      expect(generated_code).to include('async createUser(')
      expect(generated_code).to include('async getUsersSearch(')
    end

    it 'handles optional query parameters correctly' do
      expect(generated_code).to include('limit?: number')
    end

    it 'includes default export' do
      expect(generated_code).to include('export default TestApiClient')
    end
  end

  describe '#save_to_file' do
    let(:temp_file) { Tempfile.new(['test-client', '.ts']) }

    after { temp_file.unlink }

    it 'saves generated code to file' do
      generator.save_to_file(temp_file.path)
      
      content = File.read(temp_file.path)
      expect(content).to include('export class TestApiClient')
      expect(content).to include('// Generated by RapiTapir TypeScript Client Generator')
    end
  end

  describe 'type conversion' do
    it 'converts Ruby types to TypeScript types correctly' do
      expect(generator.send(:convert_type, :string, language: :typescript)).to eq('string')
      expect(generator.send(:convert_type, :integer, language: :typescript)).to eq('number')
      expect(generator.send(:convert_type, :boolean, language: :typescript)).to eq('boolean')
      expect(generator.send(:convert_type, :date, language: :typescript)).to eq('Date')
    end

    it 'converts Hash types to TypeScript object types' do
      hash_type = { name: :string, age: :integer }
      result = generator.send(:convert_type, hash_type, language: :typescript)
      expect(result).to eq('{ name: string; age: number }')
    end

    it 'converts Array types to TypeScript array types' do
      array_type = [:string]
      result = generator.send(:convert_type, array_type, language: :typescript)
      expect(result).to eq('string[]')
    end
  end

  describe 'method name generation' do
    it 'generates proper method names for different HTTP methods' do
      get_endpoint = RapiTapir.get('/users')
      post_endpoint = RapiTapir.post('/users')
      get_by_id_endpoint = RapiTapir.get('/users/:id')

      expect(generator.send(:method_name_for_endpoint, get_endpoint)).to eq('getUsers')
      expect(generator.send(:method_name_for_endpoint, post_endpoint)).to eq('createUser')
      expect(generator.send(:method_name_for_endpoint, get_by_id_endpoint)).to eq('getUsersById')
    end

    it 'handles complex paths correctly' do
      search_endpoint = RapiTapir.get('/users/search')
      
      expect(generator.send(:method_name_for_endpoint, search_endpoint)).to eq('getUsersSearch')
    end
  end

  describe 'parameter extraction' do
    let(:endpoint_with_params) do
      RapiTapir.get('/users/:id')
        .in(path_param(:id, :integer))
        .in(query(:include, :string, optional: true))
        .in(body({ name: :string }))
    end

    it 'extracts path parameters correctly' do
      path_params = generator.send(:path_parameters, endpoint_with_params)
      expect(path_params.length).to eq(1)
      expect(path_params.first.name).to eq(:id)
      expect(path_params.first.type).to eq(:integer)
    end

    it 'extracts query parameters correctly' do
      query_params = generator.send(:query_parameters, endpoint_with_params)
      expect(query_params.length).to eq(1)
      expect(query_params.first.name).to eq(:include)
      expect(query_params.first.optional?).to be(true)
    end

    it 'extracts request body correctly' do
      body_param = generator.send(:request_body, endpoint_with_params)
      expect(body_param).not_to be_nil
      expect(body_param.type).to eq({ name: :string })
    end
  end
end
